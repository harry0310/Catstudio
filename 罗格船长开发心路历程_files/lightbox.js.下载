define("lightbox", ["jquery","react-dom","keyCode"], function(__WEBPACK_EXTERNAL_MODULE_85__, __WEBPACK_EXTERNAL_MODULE_96__, __WEBPACK_EXTERNAL_MODULE_143__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 535);
/******/ })
/************************************************************************/
/******/ ({

/***/ 12:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-env browser */


var _plurr = __webpack_require__(40);

var _plurr2 = _interopRequireDefault(_plurr);

var _webI18nResources = __webpack_require__(30);

var WebI18nResources = _interopRequireWildcard(_webI18nResources);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var evernoteToPlurrLocale = function evernoteToPlurrLocale(evernoteLocale) {
  if (!evernoteLocale || evernoteLocale === 'en_XA') {
    return 'en';
  } else if (evernoteLocale.startsWith('zh_')) {
    return 'zh';
  } else if (evernoteLocale === 'in') {
    return 'id';
  } else if (evernoteLocale === 'pt_BR') {
    return 'pt-br';
  } else {
    return evernoteLocale;
  }
};

var I18n = function () {
  function I18n(messages, locale) {
    _classCallCheck(this, I18n);

    this.messages = messages;
    this.plurr = new _plurr2.default({ locale: evernoteToPlurrLocale(locale) });
  }

  _createClass(I18n, [{
    key: 'localize',
    value: function localize(key, plurrParams) {
      var msg = this.messages[key];
      if (!msg) {
        // Not translated yet.
        console.error('Untranslated string', key);
        return '';
      }

      /* Our makeJsI18n.pl script replaces all instances of "{N}" with "{{ N }}" during
       * compilation. Undo this work here at runtime for plurr only. */
      msg = this.messages[key].replace(/\{\{ /g, '{').replace(/ \}\}/g, '}');

      try {
        return this.plurr.format(msg, plurrParams || {});
      } catch (e) {
        console.error('Required plurr replacement variable probably not found for', key, '\n', e);
        return '';
      }
    }

    /**
     * A `localize` alias for compatibility with ported web/web modules.
     */

  }, {
    key: 'L',
    value: function L(key, plurrParams) {
      return this.localize(key, plurrParams);
    }
  }]);

  return I18n;
}();

var createWebI18n = function createWebI18n() {
  return new I18n(WebI18nResources.getMessages(), WebI18nResources.getLocale());
};

var i18n = createWebI18n();

exports.default = i18n;
module.exports = exports['default'];

/***/ }),

/***/ 14:
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function() {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		var result = [];
		for(var i = 0; i < this.length; i++) {
			var item = this[i];
			if(item[2]) {
				result.push("@media " + item[2] + "{" + item[1] + "}");
			} else {
				result.push(item[1]);
			}
		}
		return result.join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};


/***/ }),

/***/ 143:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_143__;

/***/ }),

/***/ 15:
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var stylesInDom = {},
	memoize = function(fn) {
		var memo;
		return function () {
			if (typeof memo === "undefined") memo = fn.apply(this, arguments);
			return memo;
		};
	},
	isOldIE = memoize(function() {
		return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
	}),
	getHeadElement = memoize(function () {
		return document.head || document.getElementsByTagName("head")[0];
	}),
	singletonElement = null,
	singletonCounter = 0,
	styleElementsInsertedAtTop = [];

module.exports = function(list, options) {
	if(typeof DEBUG !== "undefined" && DEBUG) {
		if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};
	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (typeof options.singleton === "undefined") options.singleton = isOldIE();

	// By default, add <style> tags to the bottom of <head>.
	if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

	var styles = listToStyles(list);
	addStylesToDom(styles, options);

	return function update(newList) {
		var mayRemove = [];
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			domStyle.refs--;
			mayRemove.push(domStyle);
		}
		if(newList) {
			var newStyles = listToStyles(newList);
			addStylesToDom(newStyles, options);
		}
		for(var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];
			if(domStyle.refs === 0) {
				for(var j = 0; j < domStyle.parts.length; j++)
					domStyle.parts[j]();
				delete stylesInDom[domStyle.id];
			}
		}
	};
}

function addStylesToDom(styles, options) {
	for(var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];
		if(domStyle) {
			domStyle.refs++;
			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}
			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];
			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}
			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles(list) {
	var styles = [];
	var newStyles = {};
	for(var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};
		if(!newStyles[id])
			styles.push(newStyles[id] = {id: id, parts: [part]});
		else
			newStyles[id].parts.push(part);
	}
	return styles;
}

function insertStyleElement(options, styleElement) {
	var head = getHeadElement();
	var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
	if (options.insertAt === "top") {
		if(!lastStyleElementInsertedAtTop) {
			head.insertBefore(styleElement, head.firstChild);
		} else if(lastStyleElementInsertedAtTop.nextSibling) {
			head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			head.appendChild(styleElement);
		}
		styleElementsInsertedAtTop.push(styleElement);
	} else if (options.insertAt === "bottom") {
		head.appendChild(styleElement);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement(styleElement) {
	styleElement.parentNode.removeChild(styleElement);
	var idx = styleElementsInsertedAtTop.indexOf(styleElement);
	if(idx >= 0) {
		styleElementsInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement(options) {
	var styleElement = document.createElement("style");
	styleElement.type = "text/css";
	insertStyleElement(options, styleElement);
	return styleElement;
}

function createLinkElement(options) {
	var linkElement = document.createElement("link");
	linkElement.rel = "stylesheet";
	insertStyleElement(options, linkElement);
	return linkElement;
}

function addStyle(obj, options) {
	var styleElement, update, remove;

	if (options.singleton) {
		var styleIndex = singletonCounter++;
		styleElement = singletonElement || (singletonElement = createStyleElement(options));
		update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
		remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
	} else if(obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function") {
		styleElement = createLinkElement(options);
		update = updateLink.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
			if(styleElement.href)
				URL.revokeObjectURL(styleElement.href);
		};
	} else {
		styleElement = createStyleElement(options);
		update = applyToTag.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
		};
	}

	update(obj);

	return function updateStyle(newObj) {
		if(newObj) {
			if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
				return;
			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;
		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag(styleElement, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (styleElement.styleSheet) {
		styleElement.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = styleElement.childNodes;
		if (childNodes[index]) styleElement.removeChild(childNodes[index]);
		if (childNodes.length) {
			styleElement.insertBefore(cssNode, childNodes[index]);
		} else {
			styleElement.appendChild(cssNode);
		}
	}
}

function applyToTag(styleElement, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		styleElement.setAttribute("media", media)
	}

	if(styleElement.styleSheet) {
		styleElement.styleSheet.cssText = css;
	} else {
		while(styleElement.firstChild) {
			styleElement.removeChild(styleElement.firstChild);
		}
		styleElement.appendChild(document.createTextNode(css));
	}
}

function updateLink(linkElement, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	if(sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = linkElement.href;

	linkElement.href = URL.createObjectURL(blob);

	if(oldSrc)
		URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ 181:
/***/ (function(module, exports) {

module.exports = "/web-frontend/60ab7d55795d50feb4ba08359d3cba30.png";

/***/ }),

/***/ 182:
/***/ (function(module, exports) {

module.exports = "/web-frontend/6877efa925092e99b15bd37c63c1a3e0.png";

/***/ }),

/***/ 268:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(341);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(15)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/index.js?{\"relativeUrls\":false}!./lightbox.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/index.js?{\"relativeUrls\":false}!./lightbox.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 30:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.getLocale = getLocale;
exports.getMessages = getMessages;
/* eslint-env browser */
var DEFAULT_LOCALE = 'en';

function getLocale() {
  var metaLocale = typeof document !== 'undefined' && document.querySelector('meta[name="en:locale"]');
  if (metaLocale && typeof metaLocale.content === 'string') {
    return metaLocale.content;
  } else {
    return DEFAULT_LOCALE;
  }
}

function getMessages() {
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object' || _typeof(window.__EVERNOTE_I18N__) !== 'object') {
    // We may be inside of a unit test.
    return {};
  } else {
    return window.__EVERNOTE_I18N__;
  }
}

/***/ }),

/***/ 341:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(14)();
// imports


// module
exports.push([module.i, ".a11y-only {\n  /* http://www.coolfields.co.uk/2016/05/text-for-screen-readers-only-updated/ */\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  width: 1px;\n  overflow: hidden;\n  position: absolute !important;\n}\n#lightbox-container {\n  position: absolute;\n  z-index: 2147483647;\n  visibility: hidden;\n  opacity: 0;\n}\n#lightbox-container ul {\n  list-style-type: disc;\n}\n#lightbox-container ul li {\n  margin-top: 5px;\n}\n#lightbox-container.shown {\n  opacity: 1;\n  transition: opacity .33s linear;\n  visibility: visible;\n}\n#lightbox-glass,\n#lightbox-fake-border,\n#lightbox-holder {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: inherit;\n}\n#lightbox-glass {\n  height: 100%;\n  width: 100%;\n  opacity: 0.4;\n  background-color: black;\n  background-image: radial-gradient(circle, #888, black);\n}\n#lightbox-fake-border {\n  margin: auto;\n  z-index: inherit;\n}\n#lightbox-fake-border.dark {\n  background-color: black;\n  opacity: 0.3;\n  border-radius: 8px;\n}\n#lightbox-fake-border.light {\n  background-color: transparent;\n}\n#lightbox-fake-border.shaded,\n#lightbox-fake-border.shadedSquare {\n  background-color: transparent;\n}\n#lightbox-holder {\n  background-color: white;\n  margin: auto;\n  z-index: inherit;\n}\n#lightbox-holder.light {\n  border-radius: 8px;\n}\n#lightbox-holder.shaded,\n#lightbox-holder.shadedSquare {\n  box-shadow: 0 0 24px rgba(0, 0, 0, 0.3);\n}\n#lightbox-holder.shaded {\n  border-radius: 8px;\n}\n#lightbox-holder.shadedSquare {\n  border-radius: 3px;\n}\n.lightbox-iframe {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n  padding: 0;\n  border: none;\n  margin: auto;\n  overflow: hidden;\n}\n#lightbox-close {\n  cursor: pointer;\n  position: absolute;\n}\n#lightbox-close.dark {\n  height: 38px;\n  right: -20px;\n  top: -20px;\n  width: 38px;\n}\n@media all {\n  #lightbox-close.dark {\n    background:  url(" + __webpack_require__(439) + ") no-repeat;\n    background-size: 38px 38px;\n  }\n}\n@media all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) {\n  #lightbox-close.dark {\n    background:  url(" + __webpack_require__(181) + ") no-repeat;\n    background-size: 38px 38px;\n  }\n}\n@media all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (-moz-min-device-pixel-ratio: 1.5), all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (-o-min-device-pixel-ratio: 3/2), all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (-webkit-min-device-pixel-ratio: 1.5), all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (min-device-pixel-ratio: 1.5), all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (min-resolution: 1.5dppx) {\n  #lightbox-close.dark {\n    background:  url(" + __webpack_require__(181) + ") no-repeat;\n    background-size: 38px 38px;\n  }\n}\n#lightbox-close.light,\n#lightbox-close.shaded,\n#lightbox-close.shadedSquare {\n  height: 27px;\n  right: -12px;\n  top: -12px;\n  width: 27px;\n}\n@media all {\n  #lightbox-close.light,\n  #lightbox-close.shaded,\n  #lightbox-close.shadedSquare {\n    background:  url(" + __webpack_require__(440) + ") center;\n    background-size: 27px 27px;\n  }\n}\n@media all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) {\n  #lightbox-close.light,\n  #lightbox-close.shaded,\n  #lightbox-close.shadedSquare {\n    background:  url(" + __webpack_require__(182) + ") center;\n    background-size: 27px 27px;\n  }\n}\n@media all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (-moz-min-device-pixel-ratio: 1.5), all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (-o-min-device-pixel-ratio: 3/2), all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (-webkit-min-device-pixel-ratio: 1.5), all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (min-device-pixel-ratio: 1.5), all and (-moz-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2), all and (-webkit-min-device-pixel-ratio: 1.5), all and (min-device-pixel-ratio: 1.5), all and (min-resolution: 1.5dppx) and (min-resolution: 1.5dppx) {\n  #lightbox-close.light,\n  #lightbox-close.shaded,\n  #lightbox-close.shadedSquare {\n    background:  url(" + __webpack_require__(182) + ") center;\n    background-size: 27px 27px;\n  }\n}\n.fullscreen #lightbox-close {\n  top: 5px;\n  right: 5px;\n}\n.lightbox-modal {\n  overflow: hidden;\n}\n", ""]);

// exports


/***/ }),

/***/ 40:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (C) 2012-2016 Igor Afanasyev, https://github.com/iafan/Plurr
// Version: 1.0.2

(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof module === 'object' && module.exports) {
    module.exports = factory();
  } else {
    root.Plurr = factory();
  }
}(this, function () {
  function addMissingOptions (opt, defaults) {
    for (prop in defaults) {
      if (!opt.hasOwnProperty(prop)) {
        opt[prop] = defaults[prop];
      }
    }
  }


  var _PLURAL = '_PLURAL';


  function Plurr(options) {
    //
    // Initialize object
    //

    var defaultOptions = options || {};
    addMissingOptions(defaultOptions, {
      locale: 'en',
      autoPlurals: true,
      strict: true
    });

    //
    // list of plural equations taken from
    // http://translate.sourceforge.net/wiki/l10n/pluralforms
    //
    var pluralEquations = {
      'ach': function(n) { return 0; }, // Acholi
      'af': function(n) { return (n!=1) ? 1 : 0; }, // Afrikaans
      'ak': function(n) { return (n>1) ? 1 : 0; }, // Akan
      'am': function(n) { return (n>1) ? 1 : 0; }, // Amharic
      'an': function(n) { return (n!=1) ? 1 : 0; }, // Aragonese
      'ar': function(n) { return n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5; }, // Arabic
      'arn': function(n) { return (n>1) ? 1 : 0; }, // Mapudungun
      'ast': function(n) { return (n!=1) ? 1 : 0; }, // Asturian
      'ay': function(n) { return 0; }, // Aymara
      'az': function(n) { return (n!=1) ? 1 : 0; }, // Azerbaijani

      'be': function(n) { return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }, // Belarusian
      'bg': function(n) { return (n!=1) ? 1 : 0; }, // Bulgarian
      'bn': function(n) { return (n!=1) ? 1 : 0; }, // Bengali
      'bo': function(n) { return 0; }, // Tibetan
      'br': function(n) { return (n>1) ? 1 : 0; }, // Breton
      'bs': function(n) { return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }, // Bosnian

      'ca': function(n) { return (n!=1) ? 1 : 0; }, // Catalan
      'cgg': function(n) { return 0; }, // Chiga
      'cs': function(n) { return (n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2; }, // Czech
      'csb': function(n) { return n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2; }, // Kashubian
      'cy': function(n) { return (n==1) ? 0 : (n==2) ? 1 : (n!=8 && n!=11) ? 2 : 3; }, // Welsh

      'da': function(n) { return (n!=1) ? 1 : 0; }, // Danish
      'de': function(n) { return (n!=1) ? 1 : 0; }, // German
      'dz': function(n) { return 0; }, // Dzongkha

      'el': function(n) { return (n!=1) ? 1 : 0; }, // Greek
      'en': function(n) { return (n!=1) ? 1 : 0; }, // English
      'eo': function(n) { return (n!=1) ? 1 : 0; }, // Esperanto
      'es': function(n) { return (n!=1) ? 1 : 0; }, // Spanish
      'es-ar': function(n) { return (n!=1) ? 1 : 0; }, // Argentinean Spanish
      'et': function(n) { return (n!=1) ? 1 : 0; }, // Estonian
      'eu': function(n) { return (n!=1) ? 1 : 0; }, // Basque

      'fa': function(n) { return 0; }, // Persian
      'fi': function(n) { return (n!=1) ? 1 : 0; }, // Finnish
      'fil': function(n) { return (n>1) ? 1 : 0; }, // Filipino
      'fo': function(n) { return (n!=1) ? 1 : 0; }, // Faroese
      'fr': function(n) { return (n>1) ? 1 : 0; }, // French
      'fur': function(n) { return (n!=1) ? 1 : 0; }, // Friulian
      'fy': function(n) { return (n!=1) ? 1 : 0; }, // Frisian

      'ga': function(n) { return n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4; }, // Irish
      'gl': function(n) { return (n!=1) ? 1 : 0; }, // Galician
      'gu': function(n) { return (n!=1) ? 1 : 0; }, // Gujarati
      'gun': function(n) { return (n>1) ? 1 : 0; }, // Gun

      'ha': function(n) { return (n!=1) ? 1 : 0; }, // Hausa
      'he': function(n) { return (n!=1) ? 1 : 0; }, // Hebrew
      'hi': function(n) { return (n!=1) ? 1 : 0; }, // Hindi
      'hy': function(n) { return 0; }, // Armenian
      'hr': function(n) { return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }, // Croatian
      'hu': function(n) { return (n!=1) ? 1 : 0; }, // Hungarian

      'ia': function(n) { return (n!=1) ? 1 : 0; }, // Interlingua
      'id': function(n) { return 0; }, // Indonesian
      'is': function(n) { return (n%10!=1 || n%100==11); }, // Icelandic
      'it': function(n) { return (n!=1) ? 1 : 0; }, // Italian

      'ja': function(n) { return 0; }, // Japanese
      'jv': function(n) { return (n!=0) ? 1 : 0; }, // Javanese

      'ka': function(n) { return 0; }, // Georgian
      'kk': function(n) { return 0; }, // Kazakh
      'km': function(n) { return 0; }, // Khmer
      'kn': function(n) { return (n!=1) ? 1 : 0; }, // Kannada
      'ko': function(n) { return 0; }, // Korean
      'ku': function(n) { return (n!=1) ? 1 : 0; }, // Kurdish
      'kw': function(n) { return (n==1) ? 0 : (n==2) ? 1 : (n==3) ? 2 : 3; }, // Cornish
      'ky': function(n) { return 0; }, // Kyrgyz

      'lb': function(n) { return (n!=1); }, // Letzeburgesch
      'ln': function(n) { return (n>1) ? 1 : 0; }, // Lingala
      'lo': function(n) { return 0; }, // Lao
      'lt': function(n) { return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2); }, // Lithuanian
      'lv': function(n) { return (n%10==1 && n%100!=11 ? 0 : n!=0 ? 1 : 2); }, // Latvian

      'mfe': function(n) { return (n>1) ? 1 : 0; }, // Mauritian Creole
      'mg': function(n) { return (n>1) ? 1 : 0; }, // Malagasy
      'mi': function(n) { return (n>1) ? 1 : 0; }, // Maori
      'mk': function(n) { return n==1 || n%10==1 ? 0 : 1; }, // Macedonian
      'ml': function(n) { return (n!=1) ? 1 : 0; }, // Malayalam
      'mn': function(n) { return (n!=1) ? 1 : 0; }, // Mongolian
      'mr': function(n) { return (n!=1) ? 1 : 0; }, // Marathi
      'ms': function(n) { return 0; }, // Malay
      'mt': function(n) { return (n==1 ? 0 : n==0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3); }, // Maltese

      'nah': function(n) { return (n!=1) ? 1 : 0; }, // Nahuatl
      'nap': function(n) { return (n!=1) ? 1 : 0; }, // Neapolitan
      'nb': function(n) { return (n!=1) ? 1 : 0; }, // Norwegian Bokmal
      'ne': function(n) { return (n!=1) ? 1 : 0; }, // Nepali
      'nl': function(n) { return (n!=1) ? 1 : 0; }, // Dutch
      'se': function(n) { return (n!=1) ? 1 : 0; }, // Northern Sami
      'nn': function(n) { return (n!=1) ? 1 : 0; }, // Norwegian Nynorsk
      'no': function(n) { return (n!=1) ? 1 : 0; }, // Norwegian (old code)
      'nso': function(n) { return (n!=1) ? 1 : 0; }, // Northern Sotho

      'oc': function(n) { return (n>1) ? 1 : 0; }, // Occitan
      'or': function(n) { return (n!=1) ? 1 : 0; }, // Oriya

      'ps': function(n) { return (n!=1) ? 1 : 0; }, // Pashto
      'pa': function(n) { return (n!=1) ? 1 : 0; }, // Punjabi
      'pap': function(n) { return (n!=1) ? 1 : 0; }, // Papiamento
      'pl': function(n) { return (n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }, // Polish
      'pms': function(n) { return (n!=1) ? 1 : 0; }, // Piemontese
      'pt': function(n) { return (n!=1) ? 1 : 0; }, // Portuguese
      'pt-br': function(n) { return (n>1) ? 1 : 0; }, // Brazilian Portuguese

      'rm': function(n) { return (n!=1); }, // Romansh
      'ro': function(n) { return (n==1 ? 0 : (n==0 || (n%100>0 && n%100<20)) ? 1 : 2); }, // Romanian
      'ru': function(n) { return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }, // Russian

      'sco': function(n) { return (n!=1) ? 1 : 0; }, // Scots
      'si': function(n) { return (n!=1) ? 1 : 0; }, // Sinhala
      'sk': function(n) { return (n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2; }, // Slovak
      'sl': function(n) { return (n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0); }, // Slovenian
      'so': function(n) { return (n!=1) ? 1 : 0; }, // Somali
      'son': function(n) { return 0; }, // Songhay
      'sq': function(n) { return (n!=1) ? 1 : 0; }, // Albanian
      'sr': function(n) { return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }, // Serbian
      'su': function(n) { return 0; }, // Sundanese
      'sw': function(n) { return (n!=1) ? 1 : 0; }, // Swahili
      'sv': function(n) { return (n!=1) ? 1 : 0; }, // Swedish

      'ta': function(n) { return (n!=1) ? 1 : 0; }, // Tamil
      'te': function(n) { return (n!=1) ? 1 : 0; }, // Telugu
      'tg': function(n) { return (n!=1) ? 1 : 0; }, // Tajik
      'ti': function(n) { return (n>1) ? 1 : 0; }, // Tigrinya
      'th': function(n) { return 0; }, // Thai
      'tk': function(n) { return (n!=1) ? 1 : 0; }, // Turkmen
      'tr': function(n) { return 0; }, // Turkish
      'tt': function(n) { return 0; }, // Tatar

      'ug': function(n) { return 0; }, // Uyghur
      'uk': function(n) { return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }, // Ukrainian
      'ur': function(n) { return (n!=1) ? 1 : 0; }, // Urdu
      'uz': function(n) { return 0; }, // Uzbek

      'vi': function(n) { return 0; }, // Vietnamese

      'wa': function(n) { return (n>1) ? 1 : 0; }, // Walloon

      'zh': function(n) { return 0; }, // Chinese
      'zh-personal': function(n) { return (n>1) ? 1 : 0; } // Chinese, used in special cases when dealing with personal pronoun
    };

    //
    // Choose the plural function based on locale name
    //
    this.setLocale = function(locale) {
      this.plural = pluralEquations[locale];
    }; // function locale

    this.format = function(s, params, options) {
      if (typeof params != 'object') {
        throw new TypeError("'params' is not a hash");
      }

      if ((typeof options != 'undefined') && (typeof options != 'object')) {
        throw new TypeError("'options' is not a hash");
      }

      options = options || {};

      var pluralFunc = "locale" in options ?
        pluralEquations[options.locale] || pluralEquations.en :
        this.plural;

      addMissingOptions(options, defaultOptions);

      var strict = !!options.strict;
      var autoPlurals = !!options.autoPlurals;
      var callback = options.callback;

      var chunks = s.split(/([\{\}])/);
      var blocks = [''];
      var bracketCount = 0;
      for (var i = 0, chLen = chunks.length; i < chLen; i++) {
        var chunk = chunks[i];

        if (chunk == '{') {
          bracketCount++;
          blocks.push('');
          continue;
        }

        if (chunk == '}') {
          bracketCount--;
          if (bracketCount < 0) {
            throw new SyntaxError('Unmatched } found');
          }
          var block = blocks.pop();
          var colonPos = block.indexOf(':');

          if (strict && (colonPos == 0)) {
            throw new TypeError('Empty placeholder name');
          }

          var name;

          if (colonPos == -1) { // simple placeholder
            name = block;
          } else { // multiple choices
            name = block.substr(0, colonPos);
          }

          if (!(name in params)) {
            var pPos = name.indexOf(_PLURAL);
            if (autoPlurals && (pPos != -1) && (pPos == (name.length - _PLURAL.length))) {
              var prefix = name.substr(0, pPos);
              if (!(prefix in params)) {
                if (callback) {
                  params[prefix] = callback(prefix);
                } else if (strict) {
                  throw new TypeError(
                    "Neither '" + name + "' nor '" + prefix + "' are defined"
                  );
                }
              }

              var prefixValue = parseInt(params[prefix]);
              if (prefixValue != params[prefix] || (prefixValue < 0)) {
                if (strict) {
                  throw new RangeError(
                    "Value of '" + prefix + "' is not a zero or positive integer number"
                  );
                }
                prefixValue = 0;
              }

              params[name] = pluralFunc(prefixValue);
            } else {
              if (callback) {
                params[name] = callback(name);
              } else if (strict) {
                throw new TypeError("'" + name + "' not defined");
              }
            }
          }

          var result;

          if (colonPos == -1) { // simple placeholder
            result = params[name];
          } else { // multiple choices
            var blockLen = block.length;

            if (strict && (colonPos == blockLen - 1)) {
              throw new TypeError('Empty list of variants');
            }

            var choiceIdx = parseInt(params[name]);
            if (choiceIdx != params[name] || (choiceIdx < 0)) {
              if (strict) {
                throw new RangeError(
                  "Value of '" + name + "' is not a zero or positive integer number"
                );
              }
              choiceIdx = 0;
            }
            var n = 0;
            var choiceStart = colonPos + 1;
            var choiceEnd = blockLen;
            var j = -1;

            while ((j = block.indexOf('|', j + 1)) != -1) {
              n++;
              if (n <= choiceIdx) {
                choiceStart = j + 1;
              } else if (n == choiceIdx + 1) {
                choiceEnd = j;
              }
            }
            result = block.substr(choiceStart, choiceEnd - choiceStart);
          }

          blocks[blocks.length - 1] += result;
          continue;
        }
        blocks[blocks.length - 1] += chunk;
      }

      if (bracketCount > 0) {
        throw new SyntaxError('Unmatched { found');
      }

      return blocks[0];
    }; // function format

    // initialize with the provided or default locale ('en')
    this.setLocale(defaultOptions.locale || 'en');
  }

  return Plurr;
}));


/***/ }),

/***/ 439:
/***/ (function(module, exports) {

module.exports = "/web-frontend/7132e5a25a929b5b431ab2a5c90dddaa.png";

/***/ }),

/***/ 440:
/***/ (function(module, exports) {

module.exports = "/web-frontend/cb7fd4fd570152d052808ca0dc612b73.png";

/***/ }),

/***/ 535:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* global window, document */

/**
 * This is a legacy component that shows a modal, or a "lightbox", in an absolutely-
 * positioned div. The content in the lightbox may be an iframe, HTML, or a react
 * component.
 *
 * This component is bloated and should be avoided when writing new components. It
 * combines three different methods of displaying content along with:
 *   - a cross-iframe storage mechanism
 *   - mobile animations
 *   - a close callback registry
 *   - a queueing system
 *   - a set border and background themes
 *
 * The code is full of legacy jquery from an era at Evernote where most of our pages
 * consisted of small (e.g. 100 lines or less) JS files, and single page apps were rare.
 * It was created so that we could render iframes in dialog boxes, and the functionality
 * grew from that small base. Embedding pages in other pages via iframes (e.g. notebook
 * sharing page as a dialog in the business admin page) was common before we had reusable
 * components that weren't tied to server-side rendering.
 */

exports.autoResizeHeight = autoResizeHeight;
exports.close = close;
exports.getStorage = getStorage;
exports.onclose = onclose;
exports.setHeight = setHeight;
exports.setWidth = setWidth;
exports.showWithContent = showWithContent;
exports.showWithReactComponent = showWithReactComponent;
exports.showWithUrl = showWithUrl;

var _jquery = __webpack_require__(85);

var _jquery2 = _interopRequireDefault(_jquery);

var _reactDom = __webpack_require__(96);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _i18n = __webpack_require__(12);

var _i18n2 = _interopRequireDefault(_i18n);

var _keyCode = __webpack_require__(143);

__webpack_require__(268);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BORDER_SIZE = 12;
var LANDSCAPE_MAX_WIDTH = 709;
var NORMAL_CLOSE_KEY = 'NORMAL_CLOSE';
var PORTRAIT_MAX_WIDTH = 479;
var TABLET_MAX_WIDTH = 929;

// Stores function arguments to open the next lightbox in line
var _showQueue = [];
var _lastShowQueuePreference = false;

// Temporary storage of the lightbox container for this context.
var _lightboxContainer = null;

// Types of content that can be loaded in a lightbox
var ContentType = {
  REACT: 1,
  JQUERY: 2,
  URL: 3
};

/**
 * Default options, set if not overwritten by any field in the
 * 'options' object passed in via showWithUrl or
 * showWithContent.
 */
var DEFAULTS = {
  // Click outside to hide the lightbox.
  autoHide: true,

  // Resize height to fit content, upon showing.
  autoResize: true,

  // Open the lightbox with width dependent on current window size.
  autoWidth: false,

  // Enable the 'X' button in the top-right.
  displayClose: false,

  // Enable hidding ESC to close the lightbox.
  escToClose: true,

  // Forces the lightbox height and width to 100% unconditionally.
  fullscreen: false,

  // Forces the lightbox height and width to 100% if the lightbox was shown
  // while the window had a width of a mobile device. If applied, this
  // property turns off autoResize.
  fullscreenIfSmall: false,

  // If the lightbox is fullscreen, slide it in from the bottom of the screen
  // instead of just showing it.
  openFromBottom: false,

  // If the lightbox is fullscreen, dismiss it to the bottom of the screen
  exitToBottom: true,

  // Default height (no effect if using autoResize).
  height: 600,

  // Load the content in the background, but do not show.
  hidden: false,

  // Disable background scrolling and capture tabbing while lightbox is open.
  modal: true,

  // Default width. Not affected by autoResize.
  width: 480,

  /*
   * Default theme. Theme options are as follows:
   *   dark - Has semi-transparent black border around content.
   *   light - No black border, border radius of 8px on content frame.
   *   shaded - Same as 'light', but with a box-shadow.
   *   shadedSquare - Same as 'shaded', but with a border radius of 3px.
   */
  theme: 'dark',

  // Adds a green border to the top of the fullscreen ligthbox
  fullscreenBorder: true,

  /*
   * Choose behavior for showing a lightbox when one is already
   * shown. Options are:
   *  true: This and subsequently opened lightbox won't open until
   *     the previous one closes.
   *  false: This and subsequent lightboxes will replace currently
   *     open lightboxes.
   *   null: Inherit queueing behavior from currently open lightbox.
   */
  queue: null
};

/**
 * Adjust the height of the lightbox to fit the height of the div
 * or iframe content.
 *
 * Return: The calculated height of the content.
 */
function autoResizeHeight() {
  if (!stayFullscreen()) {
    if (isIframe()) {
      // Ensure content frame's height can be autoresized based on the content size.
      getLightboxFrame().contents().find('html').height('auto');
      getLightboxFrame().contents().find('body').height('auto');
    }
    var windowHeight = (0, _jquery2.default)(window).height();
    var height = isIframe() ? getLightboxFrame().contents().find('body').height() : getLightboxFrame().height();
    height = Math.min(height, windowHeight - BORDER_SIZE);
    getLightboxHolder().height(height);
    getLightboxFakeBorder().height(height + BORDER_SIZE);
    opts('height', height);

    return height;
  }
  return undefined;
}

/**
 * Determines a good width value for the lightbox depending
 * on the window's current width.
 *
 * Return: The calculated width.
 */
function autoWidth() {
  var windowWidth = (0, _jquery2.default)(window).width();

  if (windowWidth <= PORTRAIT_MAX_WIDTH) {
    return 300;
  } else if (windowWidth <= LANDSCAPE_MAX_WIDTH) {
    return 375;
  } else if (windowWidth <= TABLET_MAX_WIDTH) {
    return 480;
  } else {
    return opts('fullSizeWidth') ? opts('fullSizeWidth') : 480;
  }
}

/**
 * Hides the lightbox, and removes the frame and its contents.
 * Tries to call any set callback functions given a callback key.
 *
 * Param: callbackKey - A key used to lookup the callback function.
 */
function exit(callbackKey) {
  // If there is no callback key, assign it a default key.
  if (typeof callbackKey !== 'string') {
    callbackKey = NORMAL_CLOSE_KEY;
  }

  var lightboxContaner = getLightboxContainer();
  var callCloseCallback = function callCloseCallback(key) {
    // Attempt to call the close callback function.
    var closeCallback = lightboxContaner[0].closeCallbacks[key];
    if (typeof closeCallback === 'function') {
      closeCallback();
    }
  };

  // Hide the lightbox.
  lightboxContaner.removeClass('shown');
  if (opts('modal')) {
    toggleModal(false);
  }

  setupKeyHandler(false);

  var elementNodeType = window && window.Node && window.Node.ELEMENT_NODE || 1;
  if (getLightboxFrame().get(0) && getLightboxFrame().get(0).nodeType === elementNodeType) {
    // make sure we have a DOM element before trying to unmount it
    _reactDom2.default.unmountComponentAtNode(getLightboxFrame().get(0));
  }
  getLightboxFrame().remove();

  // WEB-10608: The callback may open a new lightbox; remove the
  // lightbox frame before calling the callback.
  callCloseCallback(callbackKey);
}

/**
 * Closes the lightbox, if it was open. If called by an iframe,
 * this function may try to close a lightbox in the parent document.
 * Optionally takes in a parameter 'key', which causes the
 * a matching close callback to be called if it exists.
 */
function close(callbackKey) {
  if (opts('exitToBottom') && stayFullscreen()) {
    var height = (0, _jquery2.default)(window).height();
    getLightboxHolder().animate({ 'margin-top': height + 'px', opacity: 0.2 }, 320, function () {
      return exit(callbackKey);
    });
    getLightboxGlass().animate({ opacity: 0.0 }, 220);
  } else {
    exit(callbackKey);
  }

  // show next lightbox in line
  if (_showQueue.length) {
    var deferredShowFunction = _showQueue.shift();
    deferredShowFunction();
    getLightboxFrame().trigger('load.lightbox');
  }
}

/**
 * Exposes a cross-context map for storage. Accessible from any frame.
 */
function getStorage() {
  // WEB-26595: Do not call getLightboxContainer() until storage is actually required.
  return getLightboxContainer()[0].storage;
}

/**
 * Create the root lightbox container div and setup its data
 * properties, if the container does not exist. append the container
 * to the body.
 *
 * Return: The wrapped lightbox container div.
 */
function createContainer() {
  var lightboxContainer = (0, _jquery2.default)('#lightbox-container');
  if (!lightboxContainer.length) {
    // Create the container.
    lightboxContainer = (0, _jquery2.default)('<div id="lightbox-container"></div>');
    (0, _jquery2.default)('body').append(lightboxContainer);

    // Store cross-iframe data in the container node.
    lightboxContainer[0].closeCallbacks = {};
    lightboxContainer[0].storage = {};
    lightboxContainer[0].opts = {};
  } else if (opts('hidden')) {
    // Lightbox exists; ensure it isn't shown.
    lightboxContainer.removeClass('shown');
  }

  return lightboxContainer;
}

/**
 * Create all necessary lightbox elements and add them to the DOM,
 * attaching them to the lightbox container.
 *
 * @param {jQuery|string|ReactElement} item - the jQuery element, source url, or
 *   ReactElement to display in the frame
 * @return {jQuery|string|ReactComponent} the mounted jQuery element, source url, or
 *   rendered React component
 */
function createLightboxElements(item, contentType) {
  // Choose between div or iframe.
  var frameType = contentType === ContentType.URL ? 'iframe' : 'div';
  var theme = void 0;
  switch (opts('theme')) {
    case 'light':
    case 'shaded':
    case 'shadedSquare':
      // Permit a predefined set of themes.
      theme = opts('theme');
      break;
    case 'dark':
    default:
      theme = 'dark';
      break;
  }
  createContainer().html(templateToHtml(frameType, theme));
  var lightboxFrame = (0, _jquery2.default)('#lightbox-frame');
  var ret = null;
  switch (contentType) {
    case ContentType.REACT:
      ret = _reactDom2.default.render(item, lightboxFrame.get(0));
      break;
    case ContentType.JQUERY:
      // render lightbox with the contents of the jQuery object
      lightboxFrame.html(item);
      ret = lightboxFrame.children();
      break;
    case ContentType.URL:
      // render lightbox with the contents of the item page
      ret = item;
      lightboxFrame.attr('src', item);
      if (!opts('fullscreen')) {
        lightboxFrame.attr('scrolling', 'no');
      }
      lightboxFrame.addClass('lightbox-iframe');
      break;
  }

  // Set up close handlers.
  if (opts('autoHide')) {
    getLightboxGlass().click(close);
  }
  var lightboxClose = getLightboxClose();
  lightboxClose.click(close);
  if (!opts('displayClose')) {
    lightboxClose.hide();
  }

  (0, _jquery2.default)(document.body).on({ click: function click() {
      return close();
    } }, '.js-lightboxClose');

  if (opts('modal')) {
    var firstFocus = (0, _jquery2.default)('#lightbox-firstfocus');
    var lastFocus = (0, _jquery2.default)('#lightbox-lastfocus');
    lastFocus.keydown(function (e) {
      if (e.which === _keyCode.TAB && !e.shiftKey) {
        e.preventDefault();
        firstFocus[0].focus();
      }
    });
    firstFocus.keydown(function (e) {
      if (e.which === _keyCode.TAB && e.shiftKey) {
        e.preventDefault();
        lastFocus[0].focus();
      }
    });
  }
  return ret;
}

/**
 * Return: The wrapped lightbox close icon element.
 */
function getLightboxClose() {
  return (0, _jquery2.default)('#lightbox-close', getLightboxContainer());
}

/**
 * Gets the lightboxContainer, even if we're in an iframe's
 * context. Also, creates the container if it doesn't exist.
 *
 * Return: A jQuery-wrapped container div.
 */
function getLightboxContainer() {
  if (!_lightboxContainer) {
    // Always use the parent's context. For the same element, the
    // iframe and top contexts will return a different node object.
    _lightboxContainer = window.parent.$('#lightbox-container');
    if (!_lightboxContainer.length) {
      _lightboxContainer = createContainer();
    }
  }

  return _lightboxContainer;
}

/**
 * Return: The wrapped lightbox frame element.
 */
function getLightboxFrame() {
  return (0, _jquery2.default)('#lightbox-frame', getLightboxContainer());
}

/**
 * Return: The wrapped lightbox glass element.
 */
function getLightboxGlass() {
  return (0, _jquery2.default)('#lightbox-glass', getLightboxContainer());
}

/**
 * Return: The wrapped lightbox holder element.
 */
function getLightboxHolder() {
  return (0, _jquery2.default)('#lightbox-holder', getLightboxContainer());
}

/**
 * Return: The wrapped lightbox border element.
 */
function getLightboxFakeBorder() {
  return (0, _jquery2.default)('#lightbox-fake-border', getLightboxContainer());
}

/**
 * Gets or sets options.
 *
 * Params:
 *   key - The key of the options to set or get. If not present,
 *         the whole options map is returned.
 *   value - The value of the options to set. If not present, then
 *           the option itself will be returned.
 * Return: The value of the provided key, or the entire map if no
 *         key is provided.
 */
function opts(key, value) {
  var options = getLightboxContainer()[0].opts;
  if (!key) {
    return options;
  } else if (value === undefined) {
    return options[key];
  } else {
    options[key] = value;
    return value;
  }
}

/**
 * Initializes the options map from the defaults and provided options.
 *
 * Param: options - A map of options provided by the user.
 */
function init(options) {
  options = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options : {};
  getLightboxContainer()[0].opts = _jquery2.default.extend({}, DEFAULTS, options);
}

/**
 * Return: True if the lightbox is displaying an iframe.
 */
function isIframe() {
  return getLightboxFrame().is('iframe');
}

/**
 * Set a callback function to be called when the lightbox is closed.
 * Can be called by either the parent document or the child iframe.
 * Takes in a parameter of the callback 'key'; only a callback matching
 * this key will be called. If no key is passed, a callback is
 * created for when the lightbox is closed without any parameters
 * (e.g. click X button, click outside lightbox).
 *
 * Params:
 *   fn - The function to invoke if called via close().
 *   key - The string that identifies this function. If not present,
 *         then the function is associated with the normal close
 *         handler with no parameters.
 */
function onclose(fn, key) {
  if (typeof fn !== 'function') {
    // Invalid parameters: do nothing.
    return;
  }

  // Bind the function to the given close callback key.
  if (typeof key !== 'string') {
    key = NORMAL_CLOSE_KEY;
  }
  getLightboxContainer()[0].closeCallbacks[key] = fn;
}

/**
 * Shows the lightbox, showing it to the user. Performs an
 * autoResizeHeight() and other actions, depending on the set options.
 */
function open() {
  // Set the proper height before showing.
  if (opts('autoResize')) {
    autoResizeHeight();
    // Adjust the lightbox size if the user changes window size
    (0, _jquery2.default)(window).on('resize', autoResizeHeight);
  }

  if (opts('modal')) {
    toggleModal(true);
  }

  // If iframe, autoResize on src change.
  if (isIframe() && opts('autoResize')) {
    getLightboxFrame().on('load.lightbox', autoResizeHeight);
  }

  // Allow closing via escape, but only if autoHide is enabled.
  setupKeyHandler(opts('escToClose') && opts('autoHide'));

  // Unhide the lightbox.
  getLightboxContainer().addClass('shown');

  if (opts('modal') && !_jquery2.default.contains(getLightboxContainer()[0], document.activeElement || document)) {
    (0, _jquery2.default)('#lightbox-firstfocus')[0].focus();
  }
}

/**
 * Sets the height of the lightbox, overriding values set by
 * autoResizeHeight().
 *
 * Param: height - The height to set. If not provided, autoResizeHeight()
 *                 is called.
 */
function setHeight(height) {
  if (!height && opts('autoResize')) {
    // Height was not provided: set via autoResizeHeight().
    autoResizeHeight();
  } else if (height) {
    opts('height', height);
    getLightboxHolder().height(height);
    getLightboxFakeBorder().height(height + BORDER_SIZE);
  }
}

/**
 * Handles the lightbox height and width initialization. Either sets the
 * height and width considering the autoWidth, height, and width options,
 * or if fullscreen or fullscreenIfSmall is set, can disable autoResizeHeight and
 * stretch the height and width to max, if the window is of a mobile size.
 */
function setHeightAndWidth() {
  if (stayFullscreen()) {
    getLightboxHolder().addClass('fullscreen');

    if (opts('openFromBottom')) {
      var height = (0, _jquery2.default)(window).height();
      getLightboxHolder().css('margin-top', height + 'px');
    }

    // Stretch lightbox to fill screen.
    var fullScreenCss = {
      height: '100%',
      width: '100%'
    };
    getLightboxHolder().css(fullScreenCss);
    getLightboxHolder().css('overflow', 'auto');
    getLightboxHolder().css('-webkit-overflow-scrolling', 'touch');
    getLightboxFakeBorder().css(fullScreenCss);
    getLightboxFakeBorder().css('background', 'none');

    // Adds a green border to the top of the lightbox
    if (opts('fullscreenBorder')) {
      getLightboxHolder().css('border-top', 'solid 4px #5ab22c');
    }

    // Disable autoResize since the lightbox is maximized.
    opts('autoResize', false);

    if (opts('openFromBottom')) {
      getLightboxHolder().animate({ 'margin-top': '0px' }, 400);
    }
  } else {
    // Set height and width, as normal.
    setHeight(opts('height'));
    setWidth(opts('autoWidth') ? autoWidth() : opts('width'));
  }
}

/**
 * Returns true if we're supposed to stay in full screen when small
 * and the screen is currently small
 */
function stayFullscreen() {
  return opts('fullscreen') || opts('fullscreenIfSmall') && (0, _jquery2.default)(window.parent).width() <= LANDSCAPE_MAX_WIDTH;
}

/**
 * Enables or disables key bindings. (For now, this function only
 * handles ESC).
 *
 * Param: enabled - Whether the ESC binding should be enabled.
 */
function setupKeyHandler(enabled) {
  var keyHandler = function keyHandler(event) {
    if (event.which === _keyCode.ESCAPE) {
      close();
    }
  };

  var parentDoc = (0, _jquery2.default)(window.parent.document);
  var iframeDoc = isIframe() ? getLightboxFrame().contents() : (0, _jquery2.default)();

  // Remove lightbox key handlers from both document and iframe.
  (0, _jquery2.default)(parentDoc).off('keydown.lightbox');
  (0, _jquery2.default)(iframeDoc).off('keydown.lightbox');

  if (enabled) {
    // Add key handlers to both document and iframe.
    (0, _jquery2.default)(parentDoc).on('keydown.lightbox', keyHandler);
    (0, _jquery2.default)(iframeDoc).on('keydown.lightbox', keyHandler);
  }
}

/**
 * Sets the width of the iframe.
 *
 * Param: width - The new width of the iframe. If not provided,
 *                no width is set.
 */
function setWidth(width) {
  if (width) {
    opts('width', width);
    getLightboxHolder().width(width);
    getLightboxFakeBorder().width(width + BORDER_SIZE);
  }
}

/**
 * Helper function to to generate the lightbox elements, depending
 * on whether the content is a div or iframe.
 *
 * Param: frameType - A string representing the frame to display,
 *                    a div or an iframe.
 * Return: The generated html of the lightbox elements.
 */
function templateToHtml(frameType, theme) {
  return '<div id="lightbox-glass"></div>\n<div id="lightbox-fake-border" class="' + theme + '"></div>\n<div id="lightbox-holder" class="' + theme + '">\n  <span id="lightbox-firstfocus" tabindex="0"></span>\n  <' + frameType + ' id="lightbox-frame">\n  </' + frameType + '>\n  <div id="lightbox-close" class="' + theme + '" title="' + _i18n2.default.L('Close') + '" tabindex="0"></div>\n  <span id="lightbox-lastfocus" tabindex="0"></span>\n</div>';
}

/**
 * Adds or removes the overflow property on the parent's html
 * element, preventing the parent from scrolling.
 *
 * Param: modal - True to prevent scrolling; false to enable it.
 */
function toggleModal(modal) {
  var htmlElement = window.parent.$('html');
  modal ? htmlElement.addClass('lightbox-modal') : htmlElement.removeClass('lightbox-modal');
}

function enqueueShowMaybe(showFunction, optionsQueue) {
  var queueOpt = optionsQueue === undefined ? DEFAULTS.queue : optionsQueue;
  _lastShowQueuePreference = typeof queueOpt === 'boolean' ? queueOpt : _lastShowQueuePreference;

  if (getLightboxContainer().hasClass('shown') && _lastShowQueuePreference) {
    _showQueue.push(showFunction);
    return true;
  } else {
    return false;
  }
}

/**
 * Shows the lightbox with the given contents (e.g. it's a div).
 * For a list of options and their default values, please see
 * documentation for 'DEFAULTS' near the top of the file.
 */
function showWithContent(content, options) {
  options = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options : {};
  if (enqueueShowMaybe(function () {
    return showWithContent(content, options);
  }, options.queue)) {
    return;
  }
  init(options);
  createLightboxElements((0, _jquery2.default)(content), ContentType.JQUERY);

  setHeightAndWidth();

  if (!opts('hidden')) {
    open();
  }
}

/**
 * Shows the lightbox, rendering the given react element inside it. For a list of
 * options and their default values, please see documentation for 'DEFAULTS' near the
 * top of the file. Returns the rendered component.
 * @param {ReactElement} reactElement the React element to render
 * @return {ReactComponent} the rendered React component
 */
function showWithReactComponent(reactElement, options) {
  options = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options : {};
  if (enqueueShowMaybe(function () {
    return showWithReactComponent(reactElement, options);
  }, options.queue)) {
    return null;
  }
  init(options);
  var renderedComponent = createLightboxElements(reactElement, ContentType.REACT);

  setHeightAndWidth();

  if (!opts('hidden')) {
    open();
  }
  return renderedComponent;
}

/**
 * Shows a lightbox with an iframe, set to the given URL.
 * For a list of options and their default values, please see
 * documentation for 'DEFAULTS' near the top of the file.
 */
function showWithUrl(url, options) {
  options = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options : {};
  if (enqueueShowMaybe(function () {
    return showWithUrl(url, options);
  }, options.queue)) {
    return;
  }
  var openIfNotHidden = function openIfNotHidden() {
    getLightboxFrame().off('load.lightbox');
    if (!opts('hidden')) {
      open();
    }
  };
  init(options);
  createLightboxElements(url, ContentType.URL);

  setHeightAndWidth();

  opts('autoResize') ? getLightboxFrame().on('load.lightbox', openIfNotHidden) : openIfNotHidden();
}

/*
 * WEB-26918 Provide a backdoor to close the lightbox in contexts where require or
 * lightbox.js are unavailable. Main use case: close the lightbox for pages that may
 * either show content or simply forward to another application (e.g. OpenNativeBase).
 * FIXME: Deal with this another way (e.g. lightbox options, beforeunload event)
 */
window.lightboxForceClose = close;

/***/ }),

/***/ 85:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_85__;

/***/ }),

/***/ 96:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_96__;

/***/ })

/******/ })});;